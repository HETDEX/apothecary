#!/usr/bin/python

import numpy as np
import os.path as op
import glob
from tqdm import tqdm
from astropy.io import fits


base_path = "./"

#fits_fns = sorted(glob.glob(op.join("./",f"i???a??*.fits")))
#important_fits_filenames = ["cbwt","cbxt","cmbf","cmbp"]
#note: cmsf, cmsp, cswt, and csxt are removed as part of cleanup
#note: *ata.dat and *wave.dat are NOT checked here?
#       perhaps should also check for the bad data that feeds the plots?? e.g. the "***" values?
 

#fits_fns = sorted(glob.glob(op.join(lib_calib_path,str(yyyymm),f"i???a??*.fits")))


#slightly inefficient, but easier to track what we are checking
fits_fns = sorted(np.concatenate((glob.glob(op.join(base_path,f"i???a??cbwt.fits")),
                          glob.glob(op.join(base_path,f"i???a??cbxt.fits")),
                          glob.glob(op.join(base_path,f"i???a??cmbf.fits")),
                          glob.glob(op.join(base_path,f"i???a??cmbp.fits")),
                         )
                        )
                )

nan_ifu_amp = []
out_log = []

for fn in tqdm(fits_fns):
    with fits.open(fn) as hdu:
        try:
            if hdu[0].data is None:
                nan_ct = -1
            else:
                nan_ct = np.count_nonzero(np.isnan(hdu[0].data))

            if nan_ct != 0:
                nan_ifu_amp.append(f"{op.basename(fn)[1:4]}+{op.basename(fn)[5:7]}")
                out_log.append(f"{nan_ifu_amp[-1]} NaN={nan_ct}  {op.basename(fn)} ")
        except Exception as e:
            if hdu[0].data is None:
                lx = None
            else:
                lx = len(hdu[0].data)
            print(f"{nan_ifu_amp[-1]} EXCEPTION {op.basename(fn)} len(data) = {lx}")
            print(f"    {e}")

print("")
if len(out_log) > 0:
    print("Results:")
    for s in out_log:
        print(s)
    print("")
else:
    print("No .fits found with Nan in data.")

if len(nan_ifu_amp) > 0:
    print("NaN or empty data in .fits for the following IFU+Amps:\n")
    for ia in np.unique(nan_ifu_amp):
        print(ia)
