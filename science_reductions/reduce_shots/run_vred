#!/usr/bin/env python

#!!! gets the sky-subtracted, wavelength solution corrected, amp flipped (as needed) mutli*fits file(s)
#!!! key operation is call to ELiXer's get_mutlfits with raw=False

# takes parameters, YYYYMMDD (int) , shot (int), exposures (int or '?'), IFU SLOTID (optional, int), AMP (optional, str)
# example: get_multifits 20200401 014 ? 016 RU    # gets shot 20200401v014 all 3 exposures but only for IFUSLOTID 016 and amp RU
# example: get_multifits 20200401 014 2           # gets ALL the IFU+Amps for the same shot for expsoure 2 only
# pulls from tar file and reduces a shot+exposure to mutli*fits locally
# runs vred, serially, on each

# !!! Warning ... Basically no proper error control, so use caution
# !!! Warning ... This assumes you want to KEEP the multi*fits and so it works in a subdirectory under the cwd.
#                 If you instead call from another application and use this as a guide, you may well want to
#                 work under /tmp and use the multi*fits interactively and only write out as you need.

import glob
import os
import sys
import shutil
from elixer import utilities as utils
from elixer import global_config as G
from tqdm import tqdm

G.GLOBAL_LOGGING=True
G.LOG_TO_STDOUT=True

red1_path = "/scratch/03261/polonius/red1/reductions/"

cl_args = list(map(str.lower,sys.argv))


yyyymmdd = int(cl_args[1])
shot = int(cl_args[2])
try:
    exp = int(cl_args[3])
except:
    if cl_args[3] == '?' or cl_args[3] == '*':
        exp = 0
    else:
        print("invalid exposure. Must be an integer or '?'")
        exit(-1)

try:
    ifuslot = int(cl_args[4])
except:
    ifuslot = None
    
try:
    ifu_amp = cl_args[5].upper()
except:
    ifu_amp = None

    
if exp == 0:
    exps = [1,2,3]
else:
    exps = [exp]
    
    
if ifuslot is None:
    ifus = utils.get_ifus_in_shot(yyyymmdd,shot)
else:
    ifus = [ifuslot]
    
if ifu_amp is None:
    amps = ["LL","LU","RL","RU"]
else:
    amps = [ifu_amp]

#rc,old_cwd,cwd = utils.change_wd(f"./{str(yyyymmdd)}v{str(shot).zfill(3)}e{str(exp).zfill(2)}")
rc,old_cwd,cwd = utils.change_wd(f"./{str(yyyymmdd)}v{str(shot).zfill(3)}")
for exp in exps:
    print(os.getcwd())
    
    for ifu in tqdm(ifus):
        for amp in amps:
            fh = None
            try:
              fh = utils.run_vred(yyyymmdd,shot,exp,ifu,amp)
              if fh is not None:
                  os.rename(fh.name,fh.name[:-5]+"_"+str(exp).zfill(2)+".fits")
            except Exception as E:
              print(f"{ifu},{exp},{amp}, {E}")


rc,old_cwd,cwd = utils.change_wd(old_cwd)
print(os.getcwd())

print("Done.")


