#!/usr/bin/env python

# check the results of simulations run
# takes 0 or 1 parameter, the shot
# if shot not specified, checks all simXXX dirs in the current folder


import numpy as np
import os
import sys
import glob
from tqdm import tqdm
import traceback

PRINT_EXCEPTIONS = False #print out exception backtrace when they occur
PRINT_INTERMEDIATE = False #print out "bad" directories as they occur rather than just at the end

cl_args = list(map(str.lower,sys.argv))

try:
    if len(cl_args) == 2:
        shot = str((cl_args[1]))
    else:
        shot = None
except:
    shot = None


if shot is None:
    dirnames = sorted(glob.glob("sim20*s666")) #skip those that have some extra extension, like .timeout
else:
    if "v" in shot:
        dirnames = [f"sim{shot}s666"]
    else:
        dirnames = [f"sim{shot[0:8]}v{shot[8:]}s666"]


bad_dirs = []
possible_bad_dirs = []

for dn in tqdm(dirnames):
    #check HETDEX.o* file (at least last line)

    try:
        hetdex_log = sorted(glob.glob(f"{dn}/HETDEX.o*")) #may be more than one
        if len(hetdex_log) > 0:
            hetdex_log = hetdex_log[-1]

        with open(os.path.join(hetdex_log),"r") as f:
            lines = f.readlines()
            if not ("Cleaning up ..." in lines[-2] and "Removed." in lines[-1]):
                #something is wrong
                #print(lines[-2])
                #print(lines[-1])
                badstr = f"{dn} Bad {hetdex_log} file."
                bad_dirs.append(badstr)
                if PRINT_INTERMEDIATE:
                    print(badstr)

                continue
    except:
        if PRINT_EXCEPTIONS:
            print(traceback.format_exc())
        #this is a fail
        badstr = f"{dn} Bad HETDEX.o* file."
        bad_dirs.append(badstr)
        if PRINT_INTERMEDIATE:
            print(badstr)
        continue

    #check ./output directory .find files are not zero length
    try:
        findfiles = sorted(glob.glob(os.path.join(dn,"output","*.find")))
        if len(findfiles) < 500: #depending on the shot there should be 900+ up to almost 5200
            badstr =f"{dn} Bad output/*.find files. Too few: {len(findfiles)}"
            bad_dirs.append(badstr)
            if PRINT_INTERMEDIATE:
                print(badstr)
            continue

        fail = False
        zero_ct = 0
        for fn in findfiles:
            #todo: * could * check that if there are zero length files they are a multiple of 3
            #   e.g. one or more bad IFU/amps would be zero for all 3 dithers
            #   otherwise, something is wrong

            sz = os.path.getsize(fn)
            if sz == 0:
                zero_ct += 1

        if zero_ct > 0:
            if zero_ct == len(findfiles):
                badstr =f"{dn} Bad output/*.find files. ALL zero size."
                bad_dirs.append(badstr)
                if PRINT_INTERMEDIATE:
                    print(badstr)
                continue
            elif zero_ct > (0.5 * len(findfiles)): #half or more are zero
                badstr =f"{dn} Bad output/*.find files. Most ({zero_ct} / {len(findfiles)}) are zero size."
                bad_dirs.append(badstr)
                if PRINT_INTERMEDIATE:
                    print(badstr)
                continue
            else:
                # !!! BUT do not skip to the next directory,
                # !!! go ahead and continue
                if zero_ct % 3 == 0: #a multiple of 3, bad/masked IFU/amps
                    badstr =f"{dn} Possible bad output/*.find files. {zero_ct} / {len(findfiles)} zero size. Probably just masked IFU/Amps."
                    possible_bad_dirs.append(badstr)
                    if PRINT_INTERMEDIATE:
                        print(badstr)
                else:
                    badstr =f"{dn} Possible bad output/*.find files. {zero_ct} / {len(findfiles)} zero size."
                    possible_bad_dirs.append(badstr)
                    if PRINT_INTERMEDIATE:
                        print(badstr)
    except:
        if PRINT_EXCEPTIONS:
            print(traceback.format_exc())
        badstr = f"{dn} Bad output/*.find files."
        bad_dirs.append(badstr)
        if PRINT_INTERMEDIATE:
            print(badstr)
        continue

    #check .sim file exists and is populated
    try:
        simfile = sorted(glob.glob(os.path.join(dn,"*.sim")))
        if len(simfile) == 0:
            badstr =f"{dn} Missing *.sim file."
            bad_dirs.append(badstr)
            if PRINT_INTERMEDIATE:
                print(badstr)

            continue
        elif len(simfile) != 1:
            badstr = f"{dn} Too many *.sim files. {len(simfile)}"
            bad_dirs.append(badstr)
            if PRINT_INTERMEDIATE:
                print(badstr)
            continue
        else:
            simfile = simfile[0]
            sz = os.path.getsize(simfile)
            if sz == 0:
                badstr = f"{dn} Zero length *.sim file."
                bad_dirs.append(badstr)
                if PRINT_INTERMEDIATE:
                    print(badstr)
                continue
    except:
        if PRINT_EXCEPTIONS:
            print(traceback.format_exc())
        badstr = f"{dn} Bad *.sim file."
        bad_dirs.append(badstr)
        if PRINT_INTERMEDIATE:
            print(badstr)
        continue

print("\nSummary:")
if len(bad_dirs) > 0:
    for dn in bad_dirs:
        print(dn)

if len(possible_bad_dirs) > 0:
    for dn in possible_bad_dirs:
        print(dn)

print("-------------------------------")
print(f"Checked {len(dirnames)} sim directories")
print(f"{len(bad_dirs)} bad")
print(f"{len(possible_bad_dirs)} possibly bad")