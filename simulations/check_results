#!/usr/bin/env python

# check the results of simulations run
# takes 0 or 1 parameter, the shot
# if shot not specified, checks all simXXX dirs in the current folder


import numpy as np
import os
import sys
import glob
from tqdm import tqdm
import traceback
from hetdex_api.config import HDRconfig
from astropy.table import Table

PRINT_EXCEPTIONS = True #print out exception backtrace when they occur
PRINT_INTERMEDIATE = False #print out "bad" directories as they occur rather than just at the end

cl_args = list(map(str.lower,sys.argv))
singledir = False
try:
    if len(cl_args) == 2:
        shot = str((cl_args[1]))
        singledir = True
    else:
        shot = None
except:
    shot = None


if shot is None:
    dirnames = sorted(glob.glob("sim20*s666")) #skip those that have some extra extension, like .timeout
else:
    if "sim" in shot:
        dirnames = [shot] #assume of form: sim20171019v003s666
    elif "v" in shot: #assume of form 20171019v003
        dirnames = [f"sim{shot}s666"]
    else: #assume just 20171019003
        dirnames = [f"sim{shot[0:8]}v{shot[8:]}s666"]


survey_name = "hdr5"
hetdex_api_config = HDRconfig(survey_name)
ampflag_table = Table.read(hetdex_api_config.badamp) #shotid multifraem flag   (0=bad)

bad_dirs = []
bad_dirs_string = []
possible_bad_dirs = []
possible_bad_string =[]
not_yet_run_dirs = []
in_progress_dirs = []
done_dirs = []

for dn in tqdm(dirnames):
    #check HETDEX.o* file (at least last line)
    #sim20170327v011s666
    #shotid = int(f"{dn[3:11]}{dn[12:15]}")
    try:
        hetdex_log = sorted(glob.glob(f"{dn}/HETDEX.o*")) #may be more than one
        if len(hetdex_log) > 0:
            hetdex_log = hetdex_log[-1]
        else:
            #this one has not executed yet
            not_yet_run_dirs.append(dn)
            continue

        with open(os.path.join(hetdex_log),"r") as f:
            lines = f.readlines()
            if not ("Cleaning up ..." in lines[-2] and "Removed." in lines[-1]):
                #something is wrong
                #print(lines[-2])
                #print(lines[-1])

            #FIRST PART
            #slurmstepd: error: *** JOB 1697795 ON c511-063 CANCELLED AT 2025-03-17T23:25:09 DUE TO TIME LIMIT ***

                if "CANCELLED" in lines[-1]:
                    if "TIME LIMIT" in lines[-1]:
                        badstr = f"{dn} Bad {hetdex_log} file. Timed out."
                    else:
                        badstr = f"{dn} Bad {hetdex_log} file. Cancelled."
                elif "paramiko.ssh_exception" in lines[-1]:
                    badstr = f"{dn} Bad {hetdex_log} file. Last line: {lines[-1].rstrip()}"
                elif "***" in lines[-1] or "***" in lines[-2] or "slurmstepd" in lines[-1]:
                    badstr = f"{dn} Bad {hetdex_log} file. Last line: {lines[-1].rstrip()}"
                elif "FIRST PART" in lines[-1] or "Running" in lines[-1] or len(lines[-1]) < 3:
                    in_progress_dirs.append(dn)
                    continue #this is okay, just skip and keep going
                else:
                    badstr = f"{dn} Bad? {hetdex_log} file. [Need to check again]. Last line: {lines[-1].rstrip()}"

                bad_dirs_string.append(badstr)
                bad_dirs.append(dn)

                if PRINT_INTERMEDIATE:
                    print(badstr)

                continue
    except:
        if PRINT_EXCEPTIONS:
            print(traceback.format_exc())
        #this is a fail
        badstr = f"{dn} Bad HETDEX.o* file."
        bad_dirs_string.append(badstr)
        bad_dirs.append(dn)
        if PRINT_INTERMEDIATE:
            print(badstr)
        continue

    #check ./output directory .find files are not zero length
    try:
        findfiles = sorted(glob.glob(os.path.join(dn,"output","*.find")))
        if len(findfiles) < 500: #depending on the shot there should be 900+ up to almost 5200
            badstr =f"{dn} Bad output/*.find files. Too few: {len(findfiles)}"
            bad_dirs_string.append(badstr)
            bad_dirs.append(dn)
            if PRINT_INTERMEDIATE:
                print(badstr)
            continue

        fail = False
        zero_ct = 0
        at_least_one_bad_amp = 0
        for fn in findfiles:
            sz = os.path.getsize(fn)
            if sz == 0:
                #is this a bad amp?
                #20240305v021_313_023_010_032.find
                try:
                    bn = os.path.basename(fn)
                    toks = bn.split("_")
                    shotid = int(toks[0].replace('v',''))
                    multiframe = f"multi_{toks[1]}_{toks[2]}_{toks[3]}"

                    badamp_ct = 0
                    t = ampflag_table[ampflag_table['shotid']==shotid]
                    if len(t) > 0:
                        for amp in ["LU","LL","RU","RL"]:
                            ampsel = np.array(t['multiframe'] == f"{multiframe}_{amp}")
                            badamp_ct += np.count_nonzero(t['flag'][ampsel] == 0)

                    if badamp_ct < 4: # really should never by greater than
                        if singledir:
                            print(f"{bn} has {badamp_ct} amps marked bad.")
                        zero_ct += 1
                        if badamp_ct > 0:
                            at_least_one_bad_amp += 1


                except:
                    if PRINT_EXCEPTIONS:
                        print(traceback.format_exc())
                        exit(-1)
                    zero_ct += 1

        if zero_ct > 0:
            if zero_ct == len(findfiles):
                badstr =f"{dn} Bad output/*.find files. ALL zero size."
                bad_dirs_string.append(badstr)
                bad_dirs.append(dn)
                if PRINT_INTERMEDIATE:
                    print(badstr)
                continue
            elif zero_ct > (0.5 * len(findfiles)): #half or more are zero
                badstr =f"{dn} Bad output/*.find files. Most ({zero_ct} / {len(findfiles)}) are zero size."
                bad_dirs_string.append(badstr)
                bad_dirs.append(dn)
                if PRINT_INTERMEDIATE:
                    print(badstr)
                continue
            else:
                # !!! BUT do not skip to the next directory,
                # !!! go ahead and continue
                if zero_ct % 3 == 0: #a multiple of 3, bad/masked IFU/amps
                    if at_least_one_bad_amp > 0 and at_least_one_bad_amp %3 == 0:
                        badstr = f"{dn} Possible bad output/*.find files. {zero_ct} / {len(findfiles)} zero size. Some masked IFUs/Amps."
                        possible_bad_dirs.append(dn)
                        possible_bad_string.append(badstr)
                        if PRINT_INTERMEDIATE:
                            print(badstr)
                    else:

                        badstr =f"{dn} Possible bad output/*.find files. {zero_ct} / {len(findfiles)} zero size."
                        possible_bad_dirs.append(dn)
                        possible_bad_string.append(badstr)
                        if PRINT_INTERMEDIATE:
                            print(badstr)
                else:
                    badstr =f"{dn} Possible bad output/*.find files. {zero_ct} / {len(findfiles)} zero size."
                    possible_bad_dirs.append(dn)
                    possible_bad_string.append(badstr)
                    if PRINT_INTERMEDIATE:
                        print(badstr)

            continue

        #we made it to the end, assume good
        done_dirs.append(dn)

    except:
        if PRINT_EXCEPTIONS:
            print(traceback.format_exc())
        badstr = f"{dn} Bad output/*.find files."
        bad_dirs_string.append(badstr)
        bad_dirs.append(dn)
        if PRINT_INTERMEDIATE:
            print(badstr)
        continue

    #check .sim file exists and is populated
    try:
        simfile = sorted(glob.glob(os.path.join(dn,"*.sim")))
        if len(simfile) == 0:
            badstr =f"{dn} Missing *.sim file."
            bad_dirs_string.append(badstr)
            bad_dirs.append(dn)
            if PRINT_INTERMEDIATE:
                print(badstr)

            continue
        elif len(simfile) != 1:
            badstr = f"{dn} Too many *.sim files. {len(simfile)}"
            bad_dirs_string.append(badstr)
            bad_dirs.append(dn)
            if PRINT_INTERMEDIATE:
                print(badstr)
            continue
        else:
            simfile = simfile[0]
            sz = os.path.getsize(simfile)
            if sz == 0:
                badstr = f"{dn} Zero length *.sim file."
                bad_dirs_string.append(badstr)
                bad_dirs.append(dn)
                if PRINT_INTERMEDIATE:
                    print(badstr)
                continue
    except:
        if PRINT_EXCEPTIONS:
            print(traceback.format_exc())
        badstr = f"{dn} Bad *.sim file."
        bad_dirs_string.append(badstr)
        bad_dirs.append(dn)
        if PRINT_INTERMEDIATE:
            print(badstr)
        continue

print("\nSummary:")
if len(bad_dirs_string) > 0:
    for dn in bad_dirs_string:
        print(dn)

if len(possible_bad_string) > 0:
    for dn in possible_bad_string:
        print(dn)

print("-------------------------------")
print(f"Checked {len(dirnames)} sim directories")
print(f"{len(bad_dirs)} bad")
print(f"{len(possible_bad_dirs)} possibly bad")
print(f"{len(not_yet_run_dirs)} waiting to run")
print(f"{len(in_progress_dirs)} still running")
print(f"{len(done_dirs)} done")

with open("move_to_done.txt","w") as f:
    for dn in done_dirs:
        f.write(f"mv {dn} done \n")

with open("move_to_bad.txt","w") as f:
    for dn in bad_dirs:
        f.write(f"mv {dn} bad \n")

with open("possibly_bad.txt","w") as f:
    for dn in possible_bad_dirs:
        f.write(f"mv {dn} bad_possible \n")